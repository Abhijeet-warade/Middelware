#!/usr/bin/env node
const fs=require("fs"),path=require("path"),axios=require("axios"),yargs=require("yargs/yargs");function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}function generateTagService(e,t){const a=[],r=new Set;t.forEach((({method:t,Uri:n,actionTypes:s,operationId:o,pathParams:c,queryparams:i,requestBodySchema:p})=>{let l="",u="";p?.$ref&&(l=p.$ref.split("/").pop(),r.add(l)),"array"===p?.type&&(u=p.items.$ref.split("/").pop(),r.add(u));let d=n,m="";if(c&&c.length>0){c.forEach((e=>{d=d.replace("{","${")}));for(const[e,t]of Object.entries(c)){const e=mapType(t.schema.type,t.format);m+=`${t.name}: ${e}`+(c.length>1?",":"")}m=m.replace(/,$/,"")}else if(i&&i.length>0){for(const[t,a]of Object.entries(i)){let t=mapType(a.schema.type,a.format);a.schema.enum&&(t=`${capitalizeFirstLetter(e)}${capitalizeFirstLetter(a.name)}Enum`,r.add(t));m+=`${a.name}: ${t}`+(i.length>1?",":"")}m=m.replace(/,$/,"")}var h=`${""!==m?m:""}${u?`,data: ${u}`:""}${l?`,data: ${l}`:""} `;h=(h=h.replace(/^,/,"")).replace(/,$/,""),"get"===t&&a.push(`\nexport const list${removeSpecialCharacters(capitalize(o))} = (${h}) => ({\ntype: '${removeSpecialCharacters(s.LIST)}',\npayload: {\n    request: {\n        url: \`${d}\`,\n        method: 'GET',\n        ${u?"data:data ":""}${l?"data: data":""}\n    },\n},\n});\n            `),"post"===t&&a.push(`\nexport const add${removeSpecialCharacters(capitalize(o))} = (${h}) => ({\ntype: '${removeSpecialCharacters(s.ADD)}',\npayload: {\n    request: {\n        url: '${d}',\n        method: 'POST',\n        ${u?"data: data,":""}${l?"data: data":""}\n    },\n},\n});\n            `),"put"===t&&a.push(`\nexport const update${removeSpecialCharacters(capitalize(o))} = (${h}) => ({\ntype: '${removeSpecialCharacters(s.UPDATE)}',\npayload: {\n    request: {\n        url: \`${d}\`,\n        method: 'PUT',\n        ${u?"data: data":""}${l?"data: data":""}\n    },\n},\n});\n            `),"delete"===t&&a.push(`\nexport const delete${removeSpecialCharacters(capitalize(o))} = (${h}) => ({\ntype: '${removeSpecialCharacters(s.DELETE)}',\npayload: {\n    request: {\n        ${u?"data: data,":""}${l?"data: data,":""}\n        url: \`${d}\`,\n        method: 'DELETE',\n    },\n},\n});\n            `)}));const n=Array.from(r).map((e=>`import { ${e} } from "../Models/Model";`)).join("\n");return`// Generated Service for ${e} \n\n${n}\n\n`+a.join("\n")}function createActionTypes(e){return{LIST:`LIST_${e}`,ADD:`ADD_${e}`,UPDATE:`UPDATE_${e}`,DELETE:`DELETE_${e}`}}async function generateApiServices({openApiSource:e,outputDir:t}){let a;if(e?.startsWith("http")||e?.startsWith("https")){a=(await axios.get(e)).data}else a=JSON.parse(fs.readFileSync(e,"utf8"));const r=a.servers[0].url||"",n=a.paths;fs.existsSync(t)||fs.mkdirSync(t),generateDTO(a,t);const s={};for(let[e,t]of Object.entries(n))Object.keys(t).forEach((a=>{const r=t[a].tags;var n=e;const o=t[a].operationId,c=t[a].parameters,i=t[a].requestBody;let p=i?.content?.["application/json"]?.schema;var l=c?.filter((e=>"query"===e.in)),u=c?.filter((e=>"path"===e.in));l&&l.length>0&&(n=e+"?"+l.map((e=>e.name+"=${"+e.name+"}")).join("&")),r&&r.length>0&&r.forEach((e=>{s[e]||(s[e]={list:!1,add:!1,update:!1,delete:!1,methods:[]});const t={method:a,Uri:n,operationId:o,pathParams:u,queryparams:l,requestBodySchema:p,actionTypes:createActionTypes(o.toUpperCase())};"get"!==a||s[e].list||(s[e].list=!0,s[e].methods.push(t)),"post"!==a||s[e].add||(s[e].add=!0,s[e].methods.push(t)),"put"!==a||s[e].update||(s[e].update=!0,s[e].methods.push(t)),"delete"!==a||s[e].delete||(s[e].delete=!0,s[e].methods.push(t))}))}));const o=path.join(t,"reducers"),c=path.join(t,"services");fs.existsSync(o)||fs.mkdirSync(o),fs.existsSync(c)||fs.mkdirSync(c);for(const[e,t]of Object.entries(s)){const a=generateTagService(e,t.methods,r);fs.writeFileSync(path.join(c,`${e}Service.ts`),a);const n=generateTagReducer(e,t.methods);fs.writeFileSync(path.join(o,`${e}Reducer.ts`),n)}generateCombinedReducers(o),console.log("All API services and reducers generated successfully!")}function removeSpecialCharacters(e){return e.replace(/[^a-zA-Z0-9]/g,"")}function generateTagReducer(e,t){t.reduce(((e,{operationId:t})=>({...e,...createActionTypes(t.toUpperCase())})),{});return`\n  import type { Action } from 'redux';\n\n  interface ${e=removeSpecialCharacters(e)}Action extends Action {\n    payload?: {\n      data?: any;\n      item?: { id: number };\n      error?: string;\n    };\n    error?: {\n      data?: string;\n    };\n  }\n\n  interface ${e}State {\n    data: any[];\n    status: 'idle' | 'loading' | 'success' | 'failure';\n    error: string | null;\n  }\n\n  const initialState: ${e}State = {\n    data: [],\n    status: 'idle',\n    error: null,\n  };\n\n  const SUCCESS_SUFFIX = '_SUCCESS';\n  const FAILURE_SUFFIX = '_FAIL';\n\n  const ${e}Reducer = (state = initialState, action: ${e}Action): ${e}State => {\n    switch (action.type) {\n      ${t.map((({operationId:e})=>{const t=createActionTypes(e.toUpperCase());return`\n      case '${removeSpecialCharacters(t.LIST)}':\n        return { ...state, status: 'loading', error: null };\n      case '${removeSpecialCharacters(t.LIST)}' + SUCCESS_SUFFIX:\n        return { ...state, data: action.payload?.data || [], status: 'success', error: null };\n      case '${removeSpecialCharacters(t.LIST)}' + FAILURE_SUFFIX:\n        return { ...state, status: 'failure', error: action.error?.data || null };\n      \n      case '${removeSpecialCharacters(t.ADD)}':\n        return { ...state, status: 'loading', error: null };\n      case '${removeSpecialCharacters(t.ADD)}' + SUCCESS_SUFFIX:\n        return {\n          ...state,\n          data: [...state.data, action.payload?.data],\n          status: 'success',\n          error: null,\n        };\n      case '${removeSpecialCharacters(t.ADD)}' + FAILURE_SUFFIX:\n        return { ...state, status: 'failure', error: action.error?.data || null };\n      \n      case '${removeSpecialCharacters(t.UPDATE)}':\n        return { ...state, status: 'loading', error: null };\n      case '${removeSpecialCharacters(t.UPDATE)}' + SUCCESS_SUFFIX:\n        return {\n          ...state,\n          data: state.data.map(item =>\n            item.id === action.payload?.data?.id ? action.payload?.data : item\n          ),\n          status: 'success',\n          error: null,\n        };\n      case '${removeSpecialCharacters(t.UPDATE)}' + FAILURE_SUFFIX:\n        return { ...state, status: 'failure', error: action.error?.data || null };\n      \n      case '${removeSpecialCharacters(t.DELETE)}':\n        return { ...state, status: 'loading', error: null };\n      case '${removeSpecialCharacters(t.DELETE)}' + SUCCESS_SUFFIX:\n        return {\n          ...state,\n          data: state.data.filter(item => item.id !== action.payload?.item?.id),\n          status: 'success',\n          error: null,\n        };\n      case '${removeSpecialCharacters(t.DELETE)}' + FAILURE_SUFFIX:\n        return { ...state, status: 'failure', error: action.payload?.error || null };\n        `})).join("")}\n      \n      case 'RESET_${e.toUpperCase()}_STATE':\n        return initialState;\n\n      default:\n        return state;\n    }\n  };\n\n  export default ${e}Reducer;\n    `}function generateDTO(e,t){const a=e.components.schemas;let r="",n="",s=path.join(t,"Models");for(const[e,t]of Object.entries(a)){const a=t.properties||{};let s=`export class ${e} {\n`;for(const[t,r]of Object.entries(a)){let a;if(r.enum){const s=`${e}${capitalizeFirstLetter(t)}Enum`;a=s,n+=generateEnum(s,r.enum)}else if("array"===r.type&&r.items)if(r.items.$ref){a=`${r.items.$ref.split("/").pop()}[]`}else{a=`${mapType(r.items.type,r.items.format)}[]`}else if(r.$ref){a=r.$ref.split("/").pop()}else a=mapType(r.type,r.format);s+=`    ${removeSpecialCharacters(t)}!: ${a};\n`}s+="}\n\n",r+=s}fs.existsSync(s)||fs.mkdirSync(s);const o=path.join(s,"Model.ts");fs.writeFileSync(o,n+r)}function mapType(e,t){return{int64:"number",int32:"number","date-time":"string"}[t]||{integer:"number",string:"string",boolean:"boolean",array:"any[]",object:"any"}[e]||"any"}function generateEnum(e,t){let a=`export enum ${e} {\n`;for(const e of t)a+=`    ${capitalizeFirstLetter(removeSpecialCharacters(e))} = "${e}",\n`;return a+="}\n\n",a}function capitalizeFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}function generateCombinedReducers(e){const t=fs.readdirSync(e).filter((e=>e.endsWith("Reducer.ts"))),a=[],r=[];t.forEach((e=>{const t=path.basename(e,path.extname(e));a.push(`import ${removeSpecialCharacters(t)} from './${e.replace(".ts","")}';`),r.push(`  ${removeSpecialCharacters(t)}`)}));const n=`\n  ${a.join("\n")}\n  \n  import { combineReducers } from 'redux';\n  \n  export default combineReducers({\n  ${r.join(",\n")}\n  });\n  `;fs.writeFileSync(path.join(e,"combinedReducers.ts"),n),console.log("Combined reducers file generated successfully!")}const args=yargs(process.argv.slice(2)).usage("Usage: api-generator --source <path or URL> --output <directory>").option("source",{alias:"s",describe:"Path or URL to the OpenAPI schema",type:"string",demandOption:!0}).option("output",{alias:"o",describe:"Output directory for generated files",type:"string",demandOption:!0}).help("h").alias("h","help").argv;(async()=>{try{const{source:e,output:t}=args,a=path.resolve(t);console.log("Generating API services and reducers..."),console.log(`Output Directory: ${a}`),await generateApiServices({openApiSource:e,outputDir:a}),console.log("API services and reducers generated successfully!")}catch(e){console.error("Error:",e.message),process.exit(1)}})();