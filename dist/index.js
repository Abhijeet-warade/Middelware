#!/usr/bin/env node
const fs=require("fs"),path=require("path"),axios=require("axios"),yargs=require("yargs/yargs");function removeSpecialCharacters(e){return e.replace(/[^a-zA-Z0-9]/g,"")}function generateTagReducer(e,t){const n=t.reduce(((e,{actionTypes:t})=>({...e,...t})),{});return`\nimport type { AnyAction } from 'redux';\n\nconst initialState: any[] = [];\nconst SUCCESS_SUFFIX = '_SUCCESS';\n\nconst ${e=removeSpecialCharacters(e)}Reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case '${n.LIST}' + SUCCESS_SUFFIX:\n      return action.payload.data;\n\n    case '${n.ADD}' + SUCCESS_SUFFIX:\n      return [...state, action.payload.data];\n\n    case '${n.UPDATE}' + SUCCESS_SUFFIX:\n      return state.map(item => item.id === action.payload.data.id ? action.payload.data : item);\n\n    case '${n.DELETE}':\n      return state.filter(item => item.id !== action.payload.item.id);\n\n    default:\n      return state;\n  }\n};\n\nexport default ${e}Reducer;\n  `}function generateTagService(e,t,n){const s=[];return t.forEach((({method:t,route:r,actionTypes:a})=>{r.split("/").filter((e=>e&&!e.startsWith("{"))).join("_").toLowerCase();"get"===t&&s.push(`\nexport const list${capitalize(e)} = () => ({\n  type: '${a.LIST}',\n  payload: {\n    request: {\n      url: '${n+r}',\n      method: 'GET',\n    },\n  },\n});\n      `),"post"===t&&s.push(`\nexport const add${capitalize(e)} = (item : any) => ({\n  type: '${a.ADD}',\n  payload: {\n    request: {\n      url: '${n+r}',\n      method: 'POST',\n      data: item,\n    },\n  },\n});\n      `),"put"===t&&s.push(`\nexport const update${capitalize(e)} = (item : any) => ({\n  type: '${a.UPDATE}',\n  payload: {\n    request: {\n      url: \`\${'${n+r}'}/\${item.id}\`,\n      method: 'PUT',\n      data: item,\n    },\n  },\n});\n      `),"delete"===t&&s.push(`\nexport const delete${capitalize(e)} = (item : any) => ({\n  type: '${a.DELETE}',\n  payload: {\n    item,\n    request: {\n      url: \`\${'${n+r}'}/\${item.id}\`,\n      method: 'DELETE',\n    },\n  },\n});\n      `)})),`// Generated Service for ${e} \n\n`+s.join("\n")}function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}function createActionTypes(e){return{LIST:`LIST_${e}`,ADD:`ADD_${e}`,UPDATE:`UPDATE_${e}`,DELETE:`DELETE_${e}`}}async function generateApiServices({openApiSource:e,outputDir:t}){let n;if(e?.startsWith("http")||e?.startsWith("https")){n=(await axios.get(e)).data}else n=JSON.parse(fs.readFileSync(e,"utf8"));const s=n.servers[0].url||"",r=n.paths;fs.existsSync(t)||fs.mkdirSync(t,{recursive:!0});const a={};for(const[e,t]of Object.entries(r))Object.keys(t).forEach((n=>{const s=t[n].tags;s&&s.length>0&&s.forEach((t=>{a[t]||(a[t]={list:!1,add:!1,update:!1,delete:!1,methods:[]});const s={method:n,route:e,actionTypes:createActionTypes(t.toUpperCase())};"get"!==n||a[t].list||(a[t].list=!0,a[t].methods.push(s)),"post"!==n||a[t].add||(a[t].add=!0,a[t].methods.push(s)),"put"!==n||a[t].update||(a[t].update=!0,a[t].methods.push(s)),"delete"!==n||a[t].delete||(a[t].delete=!0,a[t].methods.push(s))}))}));const o=path.join(t,"reducers"),i=path.join(t,"services");fs.existsSync(t)||fs.mkdirSync(t),fs.existsSync(o)||fs.mkdirSync(o),fs.existsSync(i)||fs.mkdirSync(i);for(const[e,t]of Object.entries(a)){const n=generateTagService(e,t.methods,s);fs.writeFileSync(path.join(i,`${e}Service.ts`),n);const r=generateTagReducer(e,t.methods);fs.writeFileSync(path.join(o,`${e}Reducer.ts`),r)}console.log("All API services and reducers generated successfully!"),generateCombinedReducers(o)}function generateCombinedReducers(e){const t=fs.readdirSync(e).filter((e=>e.endsWith("Reducer.ts"))),n=[],s=[];t.forEach((e=>{const t=path.basename(e,path.extname(e));n.push(`import ${removeSpecialCharacters(t)} from './${e.replace(".ts","")}';`),s.push(`  ${removeSpecialCharacters(t)}`)}));const r=`\n${n.join("\n")}\n\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n${s.join(",\n")}\n});\n`;fs.writeFileSync(path.join(e,"combinedReducers.ts"),r),console.log("Combined reducers file generated successfully!")}const args=yargs(process.argv.slice(2)).usage("Usage: api-generator --source <path or URL> --output <directory>").option("source",{alias:"s",describe:"Path or URL to the OpenAPI schema",type:"string",demandOption:!0}).option("output",{alias:"o",describe:"Output directory for generated files",type:"string",demandOption:!0}).help("h").alias("h","help").argv;(async()=>{try{const{source:e,output:t}=args,n=path.resolve(t);console.log("Generating API services and reducers..."),console.log(`Source: ${e}`),console.log(`Output Directory: ${n}`),await generateApiServices({openApiSource:e,outputDir:n}),console.log("API services and reducers generated successfully!")}catch(e){console.error("Error:",e.message),process.exit(1)}})();